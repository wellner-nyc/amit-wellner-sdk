/* 
 * The One Api
 *
 * API for the-one-api.dev
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TheOneSDK.Model
{
    /// <summary>
    /// Model for Docs
    /// </summary>
    [DataContract]
    public partial class Docs :  IEquatable<Docs>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Docs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Docs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Docs" /> class.
        /// </summary>
        /// <param name="AcademyAwardNominations">AcademyAwardNominations (required).</param>
        /// <param name="AcademyAwardWins">AcademyAwardWins.</param>
        /// <param name="BoxOfficeRevenueInMillions">BoxOfficeRevenueInMillions.</param>
        /// <param name="BudgetInMillions">BudgetInMillions.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="RottenTomatoesScore">RottenTomatoesScore.</param>
        /// <param name="RuntimeInMinutes">RuntimeInMinutes.</param>
        public Docs(int? AcademyAwardNominations = null, int? AcademyAwardWins = null, int? BoxOfficeRevenueInMillions = null, int? BudgetInMillions = null, string Id = null, string Name = null, float? RottenTomatoesScore = null, int? RuntimeInMinutes = null)
        {
            // to ensure "AcademyAwardNominations" is required (not null)
            if (AcademyAwardNominations == null)
            {
                throw new InvalidDataException("AcademyAwardNominations is a required property for Docs and cannot be null");
            }
            else
            {
                this.AcademyAwardNominations = AcademyAwardNominations;
            }
            this.AcademyAwardWins = AcademyAwardWins;
            this.BoxOfficeRevenueInMillions = BoxOfficeRevenueInMillions;
            this.BudgetInMillions = BudgetInMillions;
            this.Id = Id;
            this.Name = Name;
            this.RottenTomatoesScore = RottenTomatoesScore;
            this.RuntimeInMinutes = RuntimeInMinutes;
        }
        
        /// <summary>
        /// Gets or Sets AcademyAwardNominations
        /// </summary>
        [DataMember(Name="academyAwardNominations", EmitDefaultValue=false)]
        public int? AcademyAwardNominations { get; set; }
        /// <summary>
        /// Gets or Sets AcademyAwardWins
        /// </summary>
        [DataMember(Name="academyAwardWins", EmitDefaultValue=false)]
        public int? AcademyAwardWins { get; set; }
        /// <summary>
        /// Gets or Sets BoxOfficeRevenueInMillions
        /// </summary>
        [DataMember(Name="boxOfficeRevenueInMillions", EmitDefaultValue=false)]
        public int? BoxOfficeRevenueInMillions { get; set; }
        /// <summary>
        /// Gets or Sets BudgetInMillions
        /// </summary>
        [DataMember(Name="budgetInMillions", EmitDefaultValue=false)]
        public int? BudgetInMillions { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets RottenTomatoesScore
        /// </summary>
        [DataMember(Name="rottenTomatoesScore", EmitDefaultValue=false)]
        public float? RottenTomatoesScore { get; set; }
        /// <summary>
        /// Gets or Sets RuntimeInMinutes
        /// </summary>
        [DataMember(Name="runtimeInMinutes", EmitDefaultValue=false)]
        public int? RuntimeInMinutes { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Docs {\n");
            sb.Append("  AcademyAwardNominations: ").Append(AcademyAwardNominations).Append("\n");
            sb.Append("  AcademyAwardWins: ").Append(AcademyAwardWins).Append("\n");
            sb.Append("  BoxOfficeRevenueInMillions: ").Append(BoxOfficeRevenueInMillions).Append("\n");
            sb.Append("  BudgetInMillions: ").Append(BudgetInMillions).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RottenTomatoesScore: ").Append(RottenTomatoesScore).Append("\n");
            sb.Append("  RuntimeInMinutes: ").Append(RuntimeInMinutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Docs);
        }

        /// <summary>
        /// Returns true if Docs instances are equal
        /// </summary>
        /// <param name="other">Instance of Docs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Docs other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AcademyAwardNominations == other.AcademyAwardNominations ||
                    this.AcademyAwardNominations != null &&
                    this.AcademyAwardNominations.Equals(other.AcademyAwardNominations)
                ) && 
                (
                    this.AcademyAwardWins == other.AcademyAwardWins ||
                    this.AcademyAwardWins != null &&
                    this.AcademyAwardWins.Equals(other.AcademyAwardWins)
                ) && 
                (
                    this.BoxOfficeRevenueInMillions == other.BoxOfficeRevenueInMillions ||
                    this.BoxOfficeRevenueInMillions != null &&
                    this.BoxOfficeRevenueInMillions.Equals(other.BoxOfficeRevenueInMillions)
                ) && 
                (
                    this.BudgetInMillions == other.BudgetInMillions ||
                    this.BudgetInMillions != null &&
                    this.BudgetInMillions.Equals(other.BudgetInMillions)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RottenTomatoesScore == other.RottenTomatoesScore ||
                    this.RottenTomatoesScore != null &&
                    this.RottenTomatoesScore.Equals(other.RottenTomatoesScore)
                ) && 
                (
                    this.RuntimeInMinutes == other.RuntimeInMinutes ||
                    this.RuntimeInMinutes != null &&
                    this.RuntimeInMinutes.Equals(other.RuntimeInMinutes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AcademyAwardNominations != null)
                    hash = hash * 59 + this.AcademyAwardNominations.GetHashCode();
                if (this.AcademyAwardWins != null)
                    hash = hash * 59 + this.AcademyAwardWins.GetHashCode();
                if (this.BoxOfficeRevenueInMillions != null)
                    hash = hash * 59 + this.BoxOfficeRevenueInMillions.GetHashCode();
                if (this.BudgetInMillions != null)
                    hash = hash * 59 + this.BudgetInMillions.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RottenTomatoesScore != null)
                    hash = hash * 59 + this.RottenTomatoesScore.GetHashCode();
                if (this.RuntimeInMinutes != null)
                    hash = hash * 59 + this.RuntimeInMinutes.GetHashCode();
                return hash;
            }
        }
    }

}
